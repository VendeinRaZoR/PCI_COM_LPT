// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 32-bit Version 13.0 (Build Build 156 04/24/2013)
// Created on Fri Jun 01 05:57:55 2018

Block1 Block1_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.irdy(irdy_sig) ,	// input  irdy_sig
	.frame(frame_sig) ,	// input  frame_sig
	.idsel(idsel_sig) ,	// input  idsel_sig
	.reset(reset_sig) ,	// input  reset_sig
	.cbe(cbe_sig) ,	// input [3:0] cbe_sig
	.intd(intd_sig) ,	// input  intd_sig
	.RX1(RX1_sig) ,	// input  RX1_sig
	.CTS(CTS_sig) ,	// input  CTS_sig
	.intc(intc_sig) ,	// input  intc_sig
	.intb(intb_sig) ,	// input  intb_sig
	.ACK(ACK_sig) ,	// input  ACK_sig
	.BUSY(BUSY_sig) ,	// input  BUSY_sig
	.PE(PE_sig) ,	// input  PE_sig
	.SELT(SELT_sig) ,	// input  SELT_sig
	.ERR(ERR_sig) ,	// input  ERR_sig
	.baudclk_221184kHz(baudclk_221184kHz_sig) ,	// input  baudclk_221184kHz_sig
	.led2(led2_sig) ,	// output  led2_sig
	.TX1(TX1_sig) ,	// output  TX1_sig
	.RTS(RTS_sig) ,	// output  RTS_sig
	.inta(inta_sig) ,	// output  inta_sig
	.RS422_TX_MINUS(RS422_TX_MINUS_sig) ,	// output  RS422_TX_MINUS_sig
	.ad(ad_sig) ,	// inout [31:0] ad_sig
	.par(par_sig) ,	// inout  par_sig
	.trdy(trdy_sig) ,	// inout  trdy_sig
	.devsel(devsel_sig) ,	// inout  devsel_sig
	.LPT_DATA(LPT_DATA_sig) ,	// inout [7:0] LPT_DATA_sig
	.STROBE(STROBE_sig) ,	// inout  STROBE_sig
	.SIN(SIN_sig) ,	// inout  SIN_sig
	.AFD(AFD_sig) ,	// inout  AFD_sig
	.INIT(INIT_sig) 	// inout  INIT_sig
);

